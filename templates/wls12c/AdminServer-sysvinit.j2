#!/bin/sh
#
# chkconfig:   345 85 15
# description: per domain Oracle Weblogic Administration Server service init script
 
### BEGIN INIT INFO
# Provides: {{ item.domain_name }}-AdminServer
# Required-Start: $network $local_fs
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Short-Description: per domain Oracle Weblogic Administration Server service.
# Description: Starts and stops per domain Oracle Weblogic Administration Server.
### END INIT INFO

{{ ansible_managed | comment }}

#. /etc/rc.d/init.d/functions

# Get domain specific config file
if [ -r "{{ oracle_weblogic_sysconfig_dir }}/wls-{{ item.domain_name|replace( '_', '-') }}" ]; then
    . {{ oracle_weblogic_sysconfig_dir }}/wls-{{ item.domain_name|replace( '_', '-') }}
fi

# Define default DOMAIN_HOME
DOMAIN_HOME="${DOMAIN_HOME:-{{ oracle_weblogic_bea_home }}/user_projects/domains/{{ item.domain_name }}}"

PROCESS_STRING="^.*weblogic.Name=AdminServer.*"
PROGRAM_START="$DOMAIN_HOME/bin/startWebLogic.sh"
PROGRAM_STOP="$DOMAIN_HOME/bin/stopWebLogic.sh"
ADMSRV_DIR=$DOMAIN_HOME/servers/AdminServer
OUT_FILE="$ADMSRV_DIR/logs/AdminServer.out"

SERVICE_NAME="AdminServer for {{ item.domain_name }}"
LOCKFILE="$ADMSRV_DIR/AdminServer.lck"

# Define WebLogic user
WL_USER="${WL_USER:-{{ oracle_weblogic_user }}}"
WL_GROUP="${WL_GROUP:-{{ oracle_weblogic_group }}}"

RETVAL="0"

# For SELinux we need to use 'runuser' not 'su'
if [ -x "/sbin/runuser" ]; then
    SU="/sbin/runuser -s /bin/sh - $WL_USER"
else
    SU="/bin/su -s /bin/sh - $WL_USER"
fi

[ "$(id -nu 2>/dev/null)" = "$WL_USER" ] && SU="/bin/sh"

start() {
        OLDPID=`/usr/bin/pgrep -f $PROCESS_STRING`
        if [ ! -z "$OLDPID" ]; then
            echo "$SERVICE_NAME is already running (pid $OLDPID) !"
            echo
            exit
        fi
        echo -n $"Starting $SERVICE_NAME ... "
        echo "`date` Starting $SERVICE_NAME ... " >> $OUT_FILE 2>&1

        export MW_HOME JAVA_HOME LD_LIBRARY_PATH

        nl=`wc -l $OUT_FILE`
        $SU -c $PROGRAM_START >> $OUT_FILE 2>&1  &

        RETVAL=$?
        if [ $RETVAL -eq 0 ] ; then
          wait_for "Server state changed to RUNNING" $nl
        else
          echo "FAILED: $RETVAL. Please check $OUT_FILE for more information."
        fi
        echo
}

wait_for() {
    res=$(tail -n +${2:-0} "$OUT_FILE" | fgrep -c "$1")
    count=120
    while [[ ! $res -gt 0 ]] && [[ $count -gt 0 ]]
    do
        sleep 1
        count=$(($count - 1))
        res=$(tail -n +${2:-0} "$OUT_FILE" | fgrep -c "$1")
    done
    res=$(tail -n +${2:-0} "$OUT_FILE" | fgrep -c "$1")
    if [ ! $res -gt 0 ]; then
        echo "FAILED or took too long time to start. Please check $OUT_FILE for more information."
    else
        echo "OK"
        touch $LOCKFILE && chown $WL_USER:$WL_GROUP $LOCKFILE
    fi
}

stop() {
        echo -n $"Stopping $SERVICE_NAME ... "

        $SU -c $PROGRAM_STOP >> $OUT_FILE 2>&1

        OLDPID=`/usr/bin/pgrep -f $PROCESS_STRING`
        if [ "$OLDPID" != "" ]; then
            echo -n "(pid $OLDPID) "
            /bin/kill -TERM $OLDPID

            RETVAL=$?
            echo "OK"
            /bin/rm -f $NODEMANAGER_LOCKFILE
            [ $RETVAL -eq 0 ] && rm -f $LOCKFILE
        else
            /bin/echo "$SERVICE_NAME is stopped"
        fi
        echo
}

restart() {
        stop
        sleep 10
        start
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart|force-reload|reload)
        restart
        ;;
  condrestart|try-restart)
        [ -f $LOCKFILE ] && restart
        ;;
  status)
        OLDPID=`/usr/bin/pgrep -f $PROCESS_STRING`
        if [ "$OLDPID" != "" ]; then
            /bin/echo "$SERVICE_NAME is running (pid: $OLDPID)"
        else
            /bin/echo "$SERVICE_NAME is stopped"
        fi
        echo
        RETVAL=$?
        ;;
  *)
        echo $"Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"
        exit 1
esac

exit $RETVAL
